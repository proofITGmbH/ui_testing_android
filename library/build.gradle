apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibVersion"
    implementation 'junit:junit:4.12'
    implementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    implementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"

    // Testing-only dependencies
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    compile "com.android.support:support-annotations:$rootProject.ext.supportLibVersion"
    compile "com.android.support.test:runner:$rootProject.ext.runnerVersion"

    // UiAutomator Testing
    implementation "com.android.support.test.uiautomator:uiautomator-v18:$rootProject.ext.uiautomatorVersion"
    implementation 'org.hamcrest:hamcrest-integration:1.3'
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttpVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
